Help on class Ipv4InterfaceContainer in module ns3:

class Ipv4InterfaceContainer(cppyy.gbl.CPPInstance)
 |  Method resolution order:
 |      Ipv4InterfaceContainer
 |      cppyy.gbl.CPPInstance
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  Add(...)
 |      void ns3::Ipv4InterfaceContainer::Add(const ns3::Ipv4InterfaceContainer& other)
 |      void ns3::Ipv4InterfaceContainer::Add(ns3::Ptr<ns3::Ipv4> ipv4, uint32_t interface)
 |      void ns3::Ipv4InterfaceContainer::Add(std::pair<ns3::Ptr<ns3::Ipv4>,unsigned int> ipInterfacePair)
 |      void ns3::Ipv4InterfaceContainer::Add(std::string ipv4Name, uint32_t interface)
 |
 |  Begin(...)
 |      std::__wrap_iter<const std::pair<ns3::Ptr<ns3::Ipv4>,unsigned int>*> ns3::Ipv4InterfaceContainer::Begin()
 |
 |  End(...)
 |      std::__wrap_iter<const std::pair<ns3::Ptr<ns3::Ipv4>,unsigned int>*> ns3::Ipv4InterfaceContainer::End()
 |
 |  Get(...)
 |      std::pair<ns3::Ptr<ns3::Ipv4>,unsigned int> ns3::Ipv4InterfaceContainer::Get(uint32_t i)
 |
 |  GetAddress(...)
 |      ns3::Ipv4Address ns3::Ipv4InterfaceContainer::GetAddress(uint32_t i, uint32_t j = 0)
 |
 |  GetN(...)
 |      unsigned int ns3::Ipv4InterfaceContainer::GetN()
 |
 |  SetMetric(...)
 |      void ns3::Ipv4InterfaceContainer::SetMetric(uint32_t i, uint16_t metric)
 |
 |  __assign__(...)
 |      ns3::Ipv4InterfaceContainer& ns3::Ipv4InterfaceContainer::operator=(const ns3::Ipv4InterfaceContainer&)
 |      ns3::Ipv4InterfaceContainer& ns3::Ipv4InterfaceContainer::operator=(ns3::Ipv4InterfaceContainer&&)
 |
 |  __init__(...)
 |      Ipv4InterfaceContainer::Ipv4InterfaceContainer()
 |      Ipv4InterfaceContainer::Ipv4InterfaceContainer(const ns3::Ipv4InterfaceContainer&)
 |      Ipv4InterfaceContainer::Ipv4InterfaceContainer(ns3::Ipv4InterfaceContainer&&)
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from cppyy.gbl.CPPInstance:
 |
 |  __add__(self, value, /)
 |      Return self+value.
 |
 |  __bool__(self, /)
 |      True if self else False
 |
 |  __destruct__(...)
 |      call the C++ destructor
 |
 |  __dispatch__(...)
 |      dispatch to selected overload
 |
 |  __eq__(self, value, /)
 |      Return self==value.
 |
 |  __ge__(self, value, /)
 |      Return self>=value.
 |
 |  __getitem__(...)
 |      pointer dereferencing
 |
 |  __gt__(self, value, /)
 |      Return self>value.
 |
 |  __hash__(self, /)
 |      Return hash(self).
 |
 |  __invert__(self, /)
 |      ~self
 |
 |  __le__(self, value, /)
 |      Return self<=value.
 |
 |  __lt__(self, value, /)
 |      Return self<value.
 |
 |  __mul__(self, value, /)
 |      Return self*value.
 |
 |  __ne__(self, value, /)
 |      Return self!=value.
 |
 |  __neg__(self, /)
 |      -self
 |
 |  __pos__(self, /)
 |      +self
 |
 |  __radd__(self, value, /)
 |      Return value+self.
 |
 |  __repr__(self, /)
 |      Return repr(self).
 |
 |  __reshape__(...)
 |      cast pointer to 1D array type
 |
 |  __rmul__(self, value, /)
 |      Return value*self.
 |
 |  __rsub__(self, value, /)
 |      Return value-self.
 |
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |
 |  __smartptr__(...)
 |      get associated smart pointer, if any
 |
 |  __str__(self, /)
 |      Return str(self).
 |
 |  __sub__(self, value, /)
 |      Return self-value.
 |
 |  __truediv__(self, value, /)
 |      Return self/value.
 |
 |  ----------------------------------------------------------------------
 |  Static methods inherited from cppyy.gbl.CPPInstance:
 |
 |  __new__(*args, **kwargs) class method of cppyy.gbl.CPPInstance
 |      Create and return a new object.  See help(type) for accurate signature.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from cppyy.gbl.CPPInstance:
 |
 |  __python_owns__
 |      If true, python manages the life time of this object

